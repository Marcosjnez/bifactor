% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cpp_functions.R
\name{sl}
\alias{sl}
\title{Schmid-Leiman Transformation.}
\usage{
sl(R, n_generals, n_groups, first_efa = NULL, second_efa = NULL)
}
\arguments{
\item{R}{Correlation matrix.}

\item{n_generals}{Number of general factors.}

\item{n_groups}{Number of group factors.}

\item{first_efa}{Arguments to pass to \code{efast} in the first-order factor extraction. See \code{efast} for the default arguments.}

\item{second_efa}{Arguments to pass to \code{efast} in the second-order factor extraction. See \code{efast} for the default arguments.}
}
\value{
\item{loadings}{Loading matrix of the Schmid-Leiman solution.}
\item{first_order_solution}{Object of class \code{efast} with the first-order solution.}
\item{second_order_solution}{Object of class \code{efast} with the second-order solution.}
\item{uniquenesses}{Vector of uniquenesses.}
\item{Rhat}{Correlation matrix predicted by the (hierarchical) model.}
}
\description{
Schmid-Leiman transformation into a bi-factor or generalized bi-factor pattern.
}
\details{
First, a hierarchical factor model is fitted using a second-order factor analysis on the factor correlation obtained from a first-order factor analysis. Then, the item loadings on the general factors are assumed to be the direct effects of the general factors according to such hierarchical model.
On the other hand, the item loadings on the group factors become the originally first-order loadings post-multiplied by the diagonal matrix containing the root of the item uniquenesses.

Obviously, the first-order factor analysis should be oblique to perform a second exploratory factor analysis.

If the second-order solution does not use an orthogonal projection, then the correlation matrix among the general factors for the Schmid-Leiman solution is simply that obtained from such second-order solution.
}
\examples{

\dontrun{
# Simulate data:
sim <- sim_factor(n_generals = 2, groups_per_general = 3, items_per_group = 5)
lambda <- sim$lambda
Target <- ifelse(lambda > 0, 1, 0)

# Target rotation for the first-order efa and oblimin for the second-order efa:
first <- list(rotation = "target", projection = "oblq", Target = Target)
second <- list(rotation = "oblimin", projection = "oblq", gamma = 0)

SL <- sl(sim$R, n_generals = 2, n_groups = 6, first, second)
}

}
\references{
JimÃ©nez, M., Abad, F.J., Garcia-Garzon, E., Garrido, L.E. (2021, June 24). Generalized exploratory bi-factor Modeling. Under review. Retrieved from https://osf.io/7aszj/?view_only=8f7bd98025104347a96f60a6736f5a64
}
